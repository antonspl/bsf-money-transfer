package com.anle.bsfmoneytransfer.controller

import com.anle.bsfmoneytransfer.dto.TransferMoneyDto
import com.anle.bsfmoneytransfer.dto.TransferredAccountsDto
import com.anle.bsfmoneytransfer.service.AccountService
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import org.springframework.http.HttpStatus
import org.springframework.web.bind.annotation.*
import java.math.BigDecimal

@RestController
@Api(tags = ["Account's methods"])
@RequestMapping("/api/v1/account")
class AccountController(val accountService: AccountService) {

    @GetMapping("/{id}")
    @ApiOperation("Get account by id")
    fun getAccount(@PathVariable id: Long) = accountService.getAccount(id)

    @PostMapping
    @ApiOperation("Create new account with autogenerated id and balance = 0")
    @ResponseStatus(code = HttpStatus.CREATED)
    fun createAccount() = accountService.createAccount()

    @PutMapping("/{id}/increase/{sum}")
    @ApiOperation("Increase balance by sum for account with id")
    fun increaseBalance(@PathVariable id: Long, @PathVariable sum: BigDecimal) = accountService.increaseBalance(id, sum)

    @PutMapping("/{id}/decrease/{sum}")
    @ApiOperation("Decrease balance by sum for account with id")
    fun decreaseBalance(@PathVariable id: Long, @PathVariable sum: BigDecimal) = accountService.decreaseBalance(id, sum)

    @PatchMapping("/transfer")
    @ApiOperation("Transfer money service")
    fun transferMoney(@RequestBody dto: TransferMoneyDto): TransferredAccountsDto = accountService.transferMoney(dto)

}
